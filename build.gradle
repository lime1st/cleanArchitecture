plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    // restdocs 플러그인 추가
    id 'com.epages.restdocs-api-spec' version "0.19.2"
}

group = 'lime1st.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'com.github.loki4j:loki-logback-appender:1.5.1'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // restdocs & openapi
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'
}

tasks.named('test') {
    useJUnitPlatform()
}

// restdocs & openapi
// 컴파일 시 빌드 폴더를 지웁니다.
compileJava {
    dependsOn 'clean'
}

// OpenApi 에 들어갈 메타데이터를 추가합니다.
// 모놀리식일 경우 해당 프로젝트의 주소를 입력하고,
// MSA 일 경우 게이트웨이의 주소를 입력하면 됩니다.
openapi3 {
    servers = [
            {
                url = 'http://localhost:8080'
            }
    ]
    title = 'User API'
    description = 'lime1st study'
    version = '1.0.0'
    format = 'json'
}

// task 를 만듭니다.
tasks.register('setDocs') {
    // openapi3 태스크를 먼저 실행합니다.
    dependsOn 'openapi3'
    // 문서가 다 생성되면 build 파일에 복사합니다.
    // MSA 일 경우 파일명이 중복될 수 있으므로,
    // 파일명 뒤에 서비스명을 붙여줍시다.
    doLast {
        copy {
            from "build/api-spec"
            include "*.json"
            include "*.yaml"
            into "build/resources/main/static/springdoc"
            rename { String fileName ->
                if (fileName.endsWith('.json')) {
                    return fileName.replace('.json', '-user.json')
                } else if (fileName.endsWith('.yaml')) {
                    return fileName.replace('.yaml', '-user.yml')
                }
                return fileName
            }
        }
    }
}

// bootRun 실행 시 문서 생성 태스크를 실행합니다.
bootRun {
    dependsOn 'setDocs'
}

// bootJar 실행 시 문서 생성 태스크를 실행합니다.
bootJar {
    dependsOn 'setDocs'
}